@import './_variables';

.box-sizing ( @sizing: border-box ) {
	-webkit-box-sizing: @sizing;
		 -moz-box-sizing: @sizing;
			box-sizing: @sizing;
}

.background-origin( @origin ) {
	-webkit-origin-size: @origin;
		 -moz-origin-size: @origin;
				origin-size: @origin;
}

.background-size( @size ) {
	-webkit-background-size: @size;
		 -moz-background-size: @size;
			background-size: @size;
}

.background-clip( @type: padding-box ) {
	background-clip: @arguments;
}

.background-color( @color: @black, @opacity: 100 ){
	background-color: fadeout( @color, unit(@opacity,%) );
}

.font-size( @font-size: @base-type-size, @offset: 1 ) {
	@rem: ( @font-size / 10 );
	font-size : ~"@{rem}rem";
	font-size : unit( @font-size, px );
	line-height: @base-line-multiplier / @font-size * @offset;
}

._inject( @content: "" ) {
	content: @content;
	display: inline-block;
}

//////////////////////////// Helper Class


// @note: these all do nothing but switch the direction.
// @note: offset is based on border @width sent by .arrow()
.arrow_pointing( @direction, @-color ) when ( @direction = up ){
	border-color: transparent transparent @-color transparent;
}

.arrow_pointing( @direction, @-color ) when ( @direction = down ){
	border-color: @-color transparent transparent transparent;
}

.arrow_pointing( @direction, @-color ) when ( @direction = left ){
	border-color: transparent transparent transparent @-color;
}

.arrow_pointing( @direction, @-color ) when ( @direction = right ){
	border-color: transparent @-color transparent transparent;
}

.arrow( @_, @width: 5px, @-color: @border-color ) {
	.border(@width, 'solid', @-color);
	._inject;
	.arrow_pointing( @_, @-color );
}

// Border helpers
// .border ( ... ) {
// 	border: @arguments;
// }

// .border (@side, @width: 1px, @style: solid, @color: @border-color ) {
// 	border-@{side}: @width @style @color;
// }

// .bt ( @width: 1px, @style: solid, @color: @border-color ) {
// 	.border(top)
// }

// .bb ( @width: 1px, @style: solid, @color: @border-color ) {
// 	border-bottom: @arguments
// }

// .bl ( @width: 1px, @style: solid, @color: @border-color ) {
// 	border-left: @arguments
// }

// box shadows
// .shadow( @x-axis: 0, @y-axis: 1px, @blur: 2px, @offset, @color: #000, @alpha: 0.1 ) {
// 	box-shadow: @x-axis @y-axis @blur @offset fade( @color, @alpha );
// }

.gradient( @deg, @start: #EEE, @start-percent: 0%, @stop: #FFF, @stop-percent: 100% ) {
	background-color: @start;
	background-image: -webkit-linear-gradient( @deg, @start @start-percent, @stop @stop-percent );
	background-image: 		  linear-gradient( @deg, @start @start-percent, @stop @stop-percent );
	}

// transforms
.transform(...) {
	-webkit-transform: @arguments;
		-ms-transform: @arguments;
			transform: @arguments;
}

.transform-origin(...) {
	-webkit-transform-origin: @arguments;
		 -moz-transform-origin: @arguments;
		-ms-transform-origin: @arguments;
			transform-origin: @arguments;
}

	.rotate( @deg: 5deg, @origin: center ) {
		.transform( rotate( @deg ) );
		.transform-origin( @origin );
	}

	.scale( @r1: 1, @r2: 1, @origin: center ) {
		.transform( scale( @r1, @r2 ) );
		.transform-origin( @origin );
	}

	.translate( @x:0, @y:0, @origin: center ) {
		.transform( translate( @x, @y ) );
		.transform-origin( @origin );
	}

	.translate3d( @x:0, @y:0, @origin: center ) {
		.transform( translate3d( @x, @y ) );
		.transform-origin( @origin );
	}

.transition( @thing: all, @dur: 0.2s, @ease: ease-in-out, @delay: 0s) {
	-webkit-transition: @arguments;
			transition: @arguments;
}

.animator( @name, @time: 0.5s, @iteration: infinite, @delay: 0.5s, @fillmode: both ) {
	-webkit-animation: @arguments;
			animation: @arguments;
}

