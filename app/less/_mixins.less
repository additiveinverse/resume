@import './_variables';

.background-color( @color: @black, @opacity: 100 ){
	background-color: fadeout( @color, unit(@opacity,%) );
}

.font-size( @font-size: @base-type-size, @offset: 1 ) {
	@rem: ( @font-size / 10 );
	font-size : ~"@{rem}rem";
	font-size : unit( @font-size, px );
	line-height: @base-line-multiplier / @font-size * @offset;
}

._inject( @content: "" ) {
	content: @content;
	display: inline-block;
}

//////////////////////////// Helper Class

// @note: these all do nothing but switch the direction.
// @note: offset is based on border @width sent by .arrow()
.arrow_pointing( @direction, @-color ) when ( @direction = up ){
	border-color: transparent transparent @-color transparent;
}

.arrow_pointing( @direction, @-color ) when ( @direction = down ){
	border-color: @-color transparent transparent transparent;
}

.arrow_pointing( @direction, @-color ) when ( @direction = left ){
	border-color: transparent transparent transparent @-color;
}

.arrow_pointing( @direction, @-color ) when ( @direction = right ){
	border-color: transparent @-color transparent transparent;
}

.arrow( @_, @width: 5px, @-color: @border-color ) {
	.border(@width, 'solid', @-color);
	._inject;
	.arrow_pointing( @_, @-color );
}

.center-abs(@parent, @element) {
	left: (@parent - @element) / 2;
}

.gradient( @deg, @start: #EEE, @start-percent: 0%, @stop: #FFF, @stop-percent: 100% ) {
	background-color: @start;
	background-image: -webkit-linear-gradient( @deg, @start @start-percent, @stop @stop-percent );
	background-image: 		  linear-gradient( @deg, @start @start-percent, @stop @stop-percent );
	}

// transforms
.transform(...) {
	-webkit-transform: @arguments;
		-ms-transform: @arguments;
			transform: @arguments;
}

.transform-origin(...) {
	-webkit-transform-origin: @arguments;
		 -moz-transform-origin: @arguments;
		-ms-transform-origin: @arguments;
			transform-origin: @arguments;
}

	.rotate( @deg: 5deg, @origin: center ) {
		.transform( rotate( @deg ) );
		.transform-origin( @origin );
	}

	.scale( @r1: 1, @r2: 1, @origin: center ) {
		.transform( scale( @r1, @r2 ) );
		.transform-origin( @origin );
	}

	.translate( @x:0, @y:0, @origin: center ) {
		.transform( translate( @x, @y ) );
		.transform-origin( @origin );
	}

	.translate3d( @x:0, @y:0, @origin: center ) {
		.transform( translate3d( @x, @y ) );
		.transform-origin( @origin );
	}

.transition( @thing: all, @dur: 0.2s, @ease: ease-in-out, @delay: 0s) {
	-webkit-transition: @arguments;
			transition: @arguments;
}

.animator( @name, @time: 0.5s, @iteration: infinite, @delay: 0.5s, @fillmode: both ) {
	-webkit-animation: @arguments;
			animation: @arguments;
}

